<?php

namespace App\Repository;

/**
 * Quote
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Quote extends \Doctrine\ORM\EntityRepository {

    /**
     *
     * @param type $quote_id
     * @param type $image_name
     * @return type $image
     */
    public function getBasketItems($quote_id, $image_name_product, $image_name_children, $lang) {
        $query = $this->getEntityManager()
                ->createQuery('SELECT pis.id FROM App\Entity\Product\Image\Size pis WHERE pis.name=:image_name_product')
                ->setParameter('image_name_product', $image_name_product);
        $product_size = $query->getOneOrNullResult();
        $query = $this->getEntityManager()
                ->createQuery(
                        'SELECT q.id AS quote_id, DATE_FORMAT(c.date_from,\'%d-%m-%Y\') AS date_from, DATE_FORMAT(c.date_to,\'%d-%m-%Y\') AS date_to, DATE_DIFF(c.date_to, c.date_from) AS count_days, p.url_key, p.id AS parent_id, pd.name AS parent_name, p.sku AS parent_sku, pr.value AS parent_price, pi.name AS parent_imagename, pis.path AS parent_imagepath, qa.children AS children_id,'
                        . ' (SELECT p_sku.sku FROM App\Entity\Product p_sku WHERE p_sku.id=qa.children) AS children_sku, '
                        . ' (SELECT p_url_key.url_key FROM App\Entity\Product p_url_key WHERE p_url_key.id=qa.children) AS children_url_key, '
                        . ' (SELECT pd_name.name FROM App\Entity\Product p_name '
                        . '         INNER JOIN App\Entity\Product\Description pd_name WITH p_name.id=pd_name.product '
                        . '         INNER JOIN App\Entity\Language l_name WITH pd_name.lang=l_name.id AND l_name.short_name=:short_name'
                        . ' WHERE p_name.id=qa.children) AS children_name, '
                        . ' (SELECT pi_image.name FROM App\Entity\Product p_image '
                        . '         LEFT JOIN App\Entity\Product\Image pi_image WITH p_image.id=pi_image.product'
                        . '         INNER JOIN App\Entity\Product\Image\Size pis_image WITH pi_image.size=pis_image.id AND pis_image.name=:image_name_children AND pi_image.is_default=1'
                        . ' WHERE p_image.id=qa.children) AS children_imagename, '
                        . ' (SELECT pis_path.path FROM App\Entity\Product p_path '
                        . '         LEFT JOIN App\Entity\Product\Image pi_path WITH p_path.id=pi_path.product '
                        . '         INNER JOIN App\Entity\Product\Image\Size pis_path WITH pi_path.size=pis_path.id AND pis_path.name=:image_name_children AND pi_path.is_default=1'
                        . ' WHERE p_path.id=qa.children) AS children_imagepath, '
                        . ' (SELECT pr_price.value FROM App\Entity\Price pr_price WHERE pr_price.product=qa.children) AS children_price'
                        . ' FROM App\Entity\Quote q'
                        . ' INNER JOIN App\Entity\Calendar c WITH q.id = c.quote AND q.id=:quote_id'
                        . ' INNER JOIN App\Entity\Product p WITH c.product = p.id'
                        . ' INNER JOIN App\Entity\Product\Description pd WITH p.id = pd.product'
                        . ' INNER JOIN App\Entity\Price pr WITH p.id = pr.product'
                        . ' INNER JOIN App\Entity\Language l WITH pd.lang = l.id AND l.short_name=:short_name'
                        . ' LEFT JOIN App\Entity\Product\Image pi WITH p.id = pi.product AND pi.is_default=1 AND pi.size = :size'
                        . ' LEFT JOIN App\Entity\Product\Image\Size pis WITH pi.size = pis.id AND pis.name = :image_name_product'
                        . ' LEFT JOIN App\Entity\Map\QuoteProductAdditional qa WITH p.id=qa.parent AND qa.quote=:quote_id'
                        . ' GROUP BY p.sku, c.date_from, children_sku'
                )
                ->setParameter('quote_id', $quote_id)
                ->setParameter('size', $product_size['id'])
                ->setParameter('image_name_product', $image_name_product)
                ->setParameter('image_name_children', $image_name_children)
                ->setParameter('short_name', $lang);

        $arr_result = array();
        $arr_data = $query->getResult();
        foreach ($arr_data as $key => $data) {
            $arr_result[$data['parent_id']]['quote_id'] = $data['quote_id'];
            $arr_result[$data['parent_id']]['days'] = $data['count_days'];
            $arr_result[$data['parent_id']]['count_days'][$data['date_from']] = $data['count_days'];
            $arr_result[$data['parent_id']]['dates'][$data['date_from']] = $data['date_from'] . ' - ' . $data['date_to'];
            $arr_result[$data['parent_id']]['url_key'] = $data['url_key'];
            $arr_result[$data['parent_id']]['parent_id'] = $data['parent_id'];
            $arr_result[$data['parent_id']]['parent_name'] = $data['parent_name'];
            $arr_result[$data['parent_id']]['parent_sku'] = $data['parent_sku'];
            $arr_result[$data['parent_id']]['price'] = $data['parent_price'];
            $arr_result[$data['parent_id']]['parent_price'][$data['date_from']] = $data['parent_price'] * $data['count_days'];
            $arr_result[$data['parent_id']]['parent_imagename'] = $data['parent_imagename'];
            $arr_result[$data['parent_id']]['parent_imagepath'] = $data['parent_imagepath'];
            if ($data['children_id']) {
                $arr_result[$data['parent_id']]['children'][$data['children_id']]['children_id'] = $data['children_id'];
                $arr_result[$data['parent_id']]['children'][$data['children_id']]['children_sku'] = $data['children_sku'];
                $arr_result[$data['parent_id']]['children'][$data['children_id']]['children_url_key'] = $data['children_url_key'];
                $arr_result[$data['parent_id']]['children'][$data['children_id']]['children_name'] = $data['children_name'];
                $arr_result[$data['parent_id']]['children'][$data['children_id']]['children_imagename'] = $data['children_imagename'];
                $arr_result[$data['parent_id']]['children'][$data['children_id']]['children_imagepath'] = $data['children_imagepath'];
                $arr_result[$data['parent_id']]['children'][$data['children_id']]['price'] = $data['children_price'];
                $arr_result[$data['parent_id']]['children'][$data['children_id']]['children_price'][$data['date_from']] = $data['children_price'] * $data['count_days'];
            } else {
                $arr_result[$data['parent_id']]['children'] = array();
            }
        }
        return $arr_result;
    }

    /**
     *
     * @return type quote
     */
    public function getCurrentQuotes($quote_id = 0) {
        return $this->createQueryBuilder('q')
                        ->where('q.updated > :hour AND q.id != :quote_id')
                        ->setParameter('hour', new \DateTime('-1 hour'))
                        ->setParameter('quote_id', $quote_id)
                        ->getQuery()
                        ->getResult();
    }

    /**
     *
     * @return type quote
     */
    public function getCurrentQuote($quote_id) {
        return $this->createQueryBuilder('q')
                        ->where('q.updated > :hour AND q.id = :quote_id')
                        ->setParameter('hour', new \DateTime('-1 hour'))
                        ->setParameter('quote_id', $quote_id)
                        ->getQuery()
                        ->getOneOrNullResult();
    }

}
